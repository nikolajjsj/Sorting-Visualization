{"version":3,"sources":["SortingVisualizer/sortingAlgorithms/sortingAlgorhitms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxArray","slice","mergeSortHelper","mainArray","startId","endId","middleId","Math","floor","k","i","j","push","doMerge","SortingVisualizer","props","state","this","resetArray","anims","algos","arrBars","document","getElementsByClassName","barOneId","barTwoId","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","arr","n","temp","setState","ANIMATION_SPEED_MS","min","max","random","className","map","value","id","key","type","onClick","mergeSort","bubbleSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f9118bf3.chunk.js","sourcesContent":["// function for merge sort\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startId, endId, auxArray, animations) {\n  if (startId === endId) return;\n  const middleId = Math.floor((startId + endId) / 2);\n  mergeSortHelper(auxArray, startId, middleId, mainArray, animations);\n  mergeSortHelper(auxArray, middleId + 1, endId, mainArray, animations);\n  doMerge(mainArray, startId, middleId, endId, auxArray, animations);\n}\n\nfunction doMerge(mainArray, startId, middleId, endId, auxArray, animations) {\n  let k = startId;\n  let i = startId;\n  let j = middleId + 1;\n  while (i <= middleId && j <= endId) {\n    animations.push([i, j]);\n    animations.push([i, j]);\n    if (auxArray[i] <= auxArray[j]) {\n      animations.push([k, auxArray[i]]);\n      mainArray[k++] = auxArray[i++];\n    } else {\n      animations.push([k, auxArray[j]]);\n      mainArray[k++] = auxArray[j++];\n    }\n  }\n  while (i <= middleId) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxArray[i]]);\n    mainArray[k++] = auxArray[i++];\n  }\n  while (j <= endId) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxArray[j]]);\n    mainArray[k++] = auxArray[j++];\n  }\n}\n\n// functions for quick sort\nfunction partitionQuickSort(array, low, high) {\n  const pivot = array[high];\n  let i = low - 1;\n  for (let j = low; j < high; j++) {\n    if (array[j] <= pivot) {\n      i++;\n\n      let temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  }\n  let temp = array[i + 1];\n  array[i + 1] = array[high];\n  array[high] = temp;\n  return i + 1;\n}\n\nexport function quickSortHelper(array, low, high) {\n  if (low < high) {\n    let partion_index = partitionQuickSort(array, low, high);\n    quickSortHelper(array, low, partion_index - 1);\n    quickSortHelper(array, partion_index + 1, high);\n  }\n}\n","import React from \"react\";\nimport \"./SortingVisualizer.css\";\nimport * as algos from \"./sortingAlgorithms/sortingAlgorhitms\";\n\nconst ANIMATION_SPEED_MS = 2;\nconst NUMBER_OF_BARS = 200;\nconst PRIMARY_COLOR = \"grey\";\nconst SECONDARY_COLOR = \"red\";\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { array: [] };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  // merge sort: https://www.geeksforgeeks.org/merge-sort/\n  mergeSort() {\n    const anims = algos.getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < anims.length; i++) {\n      const arrBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneId, barTwoId] = anims[i];\n        const barOneStyle = arrBars[barOneId].style;\n        const barTwoStyle = arrBars[barTwoId].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneId, newHeight] = anims[i];\n          const barOneStyle = arrBars[barOneId].style;\n          barOneStyle.height = `${newHeight}vh`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  // bubble sort: https://www.geeksforgeeks.org/bubble-sort/\n  bubbleSort() {\n    let arr = this.state.array;\n    const n = arr.length;\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n - i - 1; j++) {\n        const arrBars = document.getElementsByClassName(\"array-bar\");\n        setTimeout(() => {\n          const barOneStyle = arrBars[j].style;\n          const barTwoStyle = arrBars[j + 1].style;\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n        });\n        setTimeout(() => {\n          const barOneStyle = arrBars[j].style;\n          const barTwoStyle = arrBars[j + 1].style;\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n          if (arr[j] > arr[j + 1]) {\n            let temp = arr[j];\n            arr[j] = arr[j + 1];\n            arr[j + 1] = temp;\n          }\n          this.setState({ array: arr });\n        }, ANIMATION_SPEED_MS / 2);\n      }\n    }\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_BARS; i++) {\n      array.push(randomIntFromInterval(1, 90));\n    }\n    this.setState({ array });\n  }\n\n  render() {\n    const { array } = this.state;\n\n    return (\n      <div className=\"page-div\">\n        <div className=\"array-div\">\n          {array.map((value, id) => (\n            <div\n              className=\"array-bar\"\n              style={{ height: `${value}vh` }}\n              key={id}\n            ></div>\n          ))}\n        </div>\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className=\"btn btn-danger m-2\"\n            onClick={() => this.resetArray()}\n          >\n            Reset\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-dark m-2\"\n            onClick={() => this.mergeSort()}\n          >\n            Merge Sort!\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-dark m-2\"\n            onClick={() => this.bubbleSort()}\n          >\n            Bubble Sort!\n          </button>\n          <button type=\"button\" className=\"btn btn-dark m-2\">\n            Quick Sort!\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}